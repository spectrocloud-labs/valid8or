controllerManager:
  kubeRbacProxy:
    args:
    - --secure-listen-address=0.0.0.0:8443
    - --upstream=http://127.0.0.1:8080/
    - --logtostderr=true
    - --v=0
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
    image:
      repository: gcr.io/kubebuilder/kube-rbac-proxy
      tag: v0.15.0
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 5m
        memory: 64Mi
  manager:
    args:
    - --health-probe-bind-address=:8081
    - --leader-elect
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
    image:
      repository: quay.io/spectrocloud-labs/validator
      tag: v0.0.25  # x-release-please-version
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 10m
        memory: 64Mi
    sinkWebhookTimeout: 30s
  replicas: 1
  serviceAccount:
    annotations: {}
kubernetesClusterDomain: cluster.local
metricsService:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  type: ClusterIP

# Optional sink configuration
sink: {}
  # type: alertmanager
  # secretName: alertmanager-sink-secret
  # endpoint: "https://alertmanager.alertmanager.svc.cluster.local:9093"
  # insecureSkipVerify: "false"
  # caCert: ""    # (TLS CA certificate, optional)
  # username: ""  # (HTTP basic auth, optional)
  # password: ""  # (HTTP basic auth, optional)

  # OR
  # type: slack
  # secretName: slack-sink-secret
  # apiToken: ""
  # channelId: ""

  # By default, a secret will be created. Leave the above fields blank and specify 'createSecret: false' to use an existing secret.
  # WARNING: the existing secret must match the format used in sink-secret.yaml
  # createSecret: true

# Validation plugin charts
plugins:
- chart:
    name: validator-plugin-aws
    repository: "https://spectrocloud-labs.github.io/validator-plugin-aws"
    version: "v0.0.16"
  values: |-
    controllerManager:
      kubeRbacProxy:
        args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image:
          repository: gcr.io/kubebuilder/kube-rbac-proxy
          tag: v0.14.1
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
      manager:
        args:
        - --health-probe-bind-address=:8081
        - --leader-elect
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image:
          repository: quay.io/spectrocloud-labs/validator-plugin-aws
          tag: v0.0.16
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      replicas: 1
      serviceAccount:
        annotations: {}
    kubernetesClusterDomain: cluster.local
    metricsService:
      ports:
      - name: https
        port: 8443
        protocol: TCP
        targetPort: https
      type: ClusterIP
    auth:
      # Leave secret undefined for implicit auth (node instance role, IMDSv2, etc.)
      secret: {}
        # If creating a secret via pluginSecrets (see below), uncomment secretName and delete the curly braces on the line above;
        # ensuring that secretName and pluginSecrets.aws.secretName match. Alternatively, leave pluginSecrets.aws undefined and
        # specify the name of a preexisting secret in your target cluster.
        # secretName: aws-creds
      # Override the service account used by AWS validator (optional, could be used for IMDSv2 on EKS)
      # WARNING: the chosen service account must have the same RBAC privileges as seen in manager-rbac.yaml
      serviceAccountName: ""
- chart:
    name: validator-plugin-vsphere
    repository: "https://spectrocloud-labs.github.io/validator-plugin-vsphere"
    version: "v0.0.13"
  values: |-
    controllerManager:
      kubeRbacProxy:
        args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image:
          repository: gcr.io/kubebuilder/kube-rbac-proxy
          tag: v0.14.1
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
      manager:
        args:
        - --health-probe-bind-address=:8081
        - --leader-elect
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image:
          repository: quay.io/spectrocloud-labs/validator-plugin-vsphere
          tag: v0.0.13
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      replicas: 1
      serviceAccount:
        annotations: {}
    kubernetesClusterDomain: cluster.local
    metricsService:
      ports:
      - name: https
        port: 8443
        protocol: TCP
        targetPort: https
      type: ClusterIP
    auth:
      # If creating a secret via pluginSecrets (see below), secretName and pluginSecrets.vSphere.secretName must match.
      # Alternatively, leave pluginSecrets.vSphere undefined and specify the name of a preexisting secret in your target cluster.
      secretName: vsphere-creds
- chart:
    name: validator-plugin-network
    repository: "https://spectrocloud-labs.github.io/validator-plugin-network"
    version: "v0.0.7"
  values: |-
    controllerManager:
      kubeRbacProxy:
        args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image:
          repository: gcr.io/kubebuilder/kube-rbac-proxy
          tag: v0.14.1
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
      manager:
        args:
        - --health-probe-bind-address=:8081
        - --leader-elect
        containerSecurityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_RAW
            drop:
            - ALL
        image:
          repository: quay.io/spectrocloud-labs/validator-plugin-network
          tag: v0.0.7
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      replicas: 1
      serviceAccount:
        annotations: {}
    kubernetesClusterDomain: cluster.local
    metricsService:
      ports:
      - name: https
        port: 8443
        protocol: TCP
        targetPort: https
      type: ClusterIP
pluginSecrets:
  # If installing the AWS plugin, the below config is required unless one of the following applies:
  # - the target cluster already has a secret with the correct format and you've specified its name above
  # - you're deploying to a K8s cluster in AWS and relying on an node instance IAM role
  # - you're deploying to a K8s cluster in AWS and relying on IMDSv2, plus you've specified auth.serviceAccountName
  aws: {}
    # secretName: aws-creds  # ensure this matches the AWS plugin values above
    # accessKeyId: ""
    # secretAccessKey: ""
    # sessionToken: ""

  # If installing the vSphere plugin, the below config is required unless the following applies:
  # - the target cluster already has a secret with the correct format and you've specified its name above
  vSphere: {}
    # secretName: vsphere-creds  # ensure this matches the vSphere plugin values above
    # username: ""
    # password: ""
    # vcenterServer: ""
    # insecureSkipVerify: ""

controllerManager:
  kubeRbacProxy:
    args:
    - --secure-listen-address=0.0.0.0:8443
    - --upstream=http://127.0.0.1:8080/
    - --logtostderr=true
    - --v=0
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
    image:
      repository: gcr.io/kubebuilder/kube-rbac-proxy
      tag: v0.15.0
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 5m
        memory: 64Mi
  manager:
    args:
    - --health-probe-bind-address=:8081
    - --leader-elect
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
    image:
      repository: quay.io/spectrocloud-labs/validator
      tag: v0.0.27  # x-release-please-version
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 10m
        memory: 64Mi
    sinkWebhookTimeout: 30s
  replicas: 1
  serviceAccount:
    annotations: {}
kubernetesClusterDomain: cluster.local
metricsService:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  type: ClusterIP

# Optional environment variable configuration
env: []
# - name: HTTP_PROXY
#   value: http://192.168.1.100:8080
# - name: HTTPS_PROXY
#   value: http://192.168.1.100:8080
# - name: NO_PROXY
#   value: foo.bar.com,127.0.0.1

# Optional proxy configuration. If enabled, the secret containing your proxy CA certificate
# will be mounted in the manager container and configured via an init container.
proxy:
  enabled: false
  # The image used by the init container. Must include the update-ca-certificates command.
  image: quay.io/spectrocloud-labs/validator-certs-init:latest
  # The name of a secret containing a proxy CA certificate.
  secretName: proxy-cert
  # If false (using an existing secret), the key whose value is the CA certificate must end with '.crt'.
  createSecret: false
  caCert: ""  # Raw CA certificate, required if createSecret is true

# Optional sink configuration
sink: {}
  # type: alertmanager
  # secretName: alertmanager-sink-secret
  # endpoint: "https://alertmanager.alertmanager.svc.cluster.local:9093"
  # insecureSkipVerify: "false"
  # caCert: ""    # (TLS CA certificate, optional)
  # username: ""  # (HTTP basic auth, optional)
  # password: ""  # (HTTP basic auth, optional)

  # OR
  # type: slack
  # secretName: slack-sink-secret
  # apiToken: ""
  # channelId: ""

  # By default, a secret will be created. Leave the above fields blank and specify 'createSecret: false' to use an existing secret.
  # WARNING: the existing secret must match the format used in sink-secret.yaml
  # createSecret: true

# Validation plugin charts
plugins:
- chart:
    name: validator-plugin-aws
    repository: "https://spectrocloud-labs.github.io/validator-plugin-aws"
    version: v0.0.18
  values: |-
    controllerManager:
      kubeRbacProxy:
        args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image:
          repository: gcr.io/kubebuilder/kube-rbac-proxy
          tag: v0.15.0
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
      manager:
        args:
        - --health-probe-bind-address=:8081
        - --leader-elect
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image:
          repository: quay.io/spectrocloud-labs/validator-plugin-aws
          tag: v0.0.18
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      replicas: 1
      serviceAccount:
        annotations: {}
    kubernetesClusterDomain: cluster.local
    metricsService:
      ports:
      - name: https
        port: 8443
        protocol: TCP
        targetPort: https
      type: ClusterIP
    auth:
      # Option 1: Leave secret undefined for implicit auth (node instance IAM role, IMDSv2, etc.)
      # Option 2: Create a secret via pluginSecrets (see below). Note: secretName and pluginSecrets.aws.secretName must match.
      # Option 3: Specify the name of a preexisting secret in your target cluster and leave pluginSecrets.aws undefined.
      #
      secret: {}  # Delete these curly braces if you're specifying secretName!
        # secretName: aws-creds

      # Override the service account used by AWS validator (optional, could be used for IMDSv2 on EKS)
      # WARNING: the chosen service account must include all RBAC privileges found in the AWS plugin template:
      #          https://github.com/spectrocloud-labs/validator-plugin-aws/blob/main/chart/validator-plugin-aws/templates/manager-rbac.yaml
      serviceAccountName: ""
- chart:
    name: validator-plugin-azure
    repository: "https://spectrocloud-labs.github.io/validator-plugin-azure"
    version: v0.0.2
  values: |-
    controllerManager:
      kubeRbacProxy:
        args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image:
          repository: gcr.io/kubebuilder/kube-rbac-proxy
          tag: v0.15.0
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
      manager:
        args:
        - --health-probe-bind-address=:8081
        - --leader-elect
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image:
          repository: quay.io/spectrocloud-labs/validator-plugin-azure
          tag: v0.0.2
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        # Optionally specify a volumeMount to mount a volume containing a private key
        # to leverage Azure Service principal with certificate authentication.
        volumeMounts: []
      replicas: 1
      serviceAccount:
        annotations: {}
      # Optionally specify a volume containing a private key to leverage Azure Service
      # principal with certificate authentication.
      volumes: []
    kubernetesClusterDomain: cluster.local
    metricsService:
      ports:
      - name: https
        port: 8443
        protocol: TCP
        targetPort: https
      type: ClusterIP
    auth:
      # Option 1: Leave secret undefined for WorkloadIdentityCredential authentication.
      # Option 2: Create a secret via pluginSecrets (see below). Note: secretName and pluginSecrets.azure.secretName must match.
      # Option 3: Specify the name of a preexisting secret in your target cluster and leave pluginSecrets.azure undefined.
      #
      secret: {}  # Delete these curly braces if you're specifying secretName!
        # secretName: azure-creds

      # Override the service account used by Azure validator (optional, could be used for WorkloadIdentityCredentials on AKS)
      # WARNING: the chosen service account must include all RBAC privileges found in the Azure plugin template:
      #          https://github.com/spectrocloud-labs/validator-plugin-aws/blob/main/chart/validator-plugin-azure/templates/manager-rbac.yaml
      serviceAccountName: ""
- chart:
    name: validator-plugin-vsphere
    repository: "https://spectrocloud-labs.github.io/validator-plugin-vsphere"
    version: v0.0.13
  values: |-
    controllerManager:
      kubeRbacProxy:
        args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image:
          repository: gcr.io/kubebuilder/kube-rbac-proxy
          tag: v0.14.1
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
      manager:
        args:
        - --health-probe-bind-address=:8081
        - --leader-elect
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image:
          repository: quay.io/spectrocloud-labs/validator-plugin-vsphere
          tag: v0.0.13
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      replicas: 1
      serviceAccount:
        annotations: {}
    kubernetesClusterDomain: cluster.local
    metricsService:
      ports:
      - name: https
        port: 8443
        protocol: TCP
        targetPort: https
      type: ClusterIP
    auth:
      # Option 1: Create a secret via pluginSecrets (see below). Note: secretName and pluginSecrets.vSphere.secretName must match.
      # Option 2: Specify the name of a preexisting secret in your target cluster and leave pluginSecrets.vSphere undefined.
      secretName: vsphere-creds
- chart:
    name: validator-plugin-network
    repository: "https://spectrocloud-labs.github.io/validator-plugin-network"
    version: v0.0.9
  values: |-
    controllerManager:
      kubeRbacProxy:
        args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image:
          repository: gcr.io/kubebuilder/kube-rbac-proxy
          tag: v0.15.0
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
      manager:
        args:
        - --health-probe-bind-address=:8081
        - --leader-elect
        containerSecurityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_RAW
            drop:
            - ALL
        image:
          repository: quay.io/spectrocloud-labs/validator-plugin-network
          tag: v0.0.9
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      replicas: 1
      serviceAccount:
        annotations: {}
    kubernetesClusterDomain: cluster.local
    metricsService:
      ports:
      - name: https
        port: 8443
        protocol: TCP
        targetPort: https
      type: ClusterIP

pluginSecrets:
  # If installing the AWS plugin, the below config is required unless one of the following applies:
  # - The target cluster already contains a secret with the correct format and you've specified its name above.
  #   If specifying your own secret, refer to chart/validator/templates/plugin-secret-aws.yaml for
  #   an example of the expected format and ensure that it exists in the same namespace as the Helm release.
  # - You're deploying to a K8s cluster in AWS and relying on an node instance IAM role
  # - You're deploying to a K8s cluster in AWS and relying on IMDSv2, plus you've specified auth.serviceAccountName
  #
  aws: {}  # Don't forget to delete these curly braces if you're specifying credentials here!
    # secretName: aws-creds  # ensure this matches the AWS plugin values above
    #
    # Any valid combination of AWS credential environment variables, per the options defined in:
    # https://aws.github.io/aws-sdk-go-v2/docs/configuring-sdk/#environment-variables.
    # env:
    #   AWS_ACCESS_KEY_ID: ""
    #   AWS_SECRET_ACCESS_KEY: ""
    #   AWS_SESSION_TOKEN: ""

  # If installing the Azure plugin, the below config is required unless one of the following applies:
  # - The target cluster already contains a secret with the correct format and you've specified its name above.
  #   If specifying your own secret, refer to chart/validator/templates/plugin-secret-azure.yaml for
  #   an example of the expected format and ensure that it exists in the same namespace as the Helm release.
  # - You're deploying to a K8s cluster in AKS and relying on WorkloadIdentityCredentials, plus you've specified auth.serviceAccountName
  #
  azure: {}  # Don't forget to delete these curly braces if you're specifying credentials here!
    # secretName: azure-creds  # ensure this matches the Azure plugin values above
    #
    # Any valid combination of Azure credential environment variables, per the options defined in:
    # https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/azidentity#readme-environment-variables.
    # env:
    #   AZURE_CLIENT_ID: ""
    #   AZURE_TENANT_ID: ""
    #   AZURE_CLIENT_SECRET: ""
    #   AZURE_CLIENT_CERTIFICATE_PATH: ""
    #   AZURE_CLIENT_CERTIFICATE_PASSWORD: ""
    #   AZURE_USERNAME: ""
    #   AZURE_PASSWORD: ""

  # If installing the vSphere plugin, the below config is required unless the following applies:
  # - The target cluster already contains a secret with the correct format and you've specified its name above.
  #   If specifying your own secret, refer to chart/validator/templates/plugin-secret-vsphere.yaml for
  #   an example of the expected format and ensure that it exists in the same namespace as the Helm release.
  #
  vSphere: {}  # Don't forget to delete these curly braces if you're specifying credentials here!
    # secretName: vsphere-creds  # ensure this matches the vSphere plugin values above
    # username: ""
    # password: ""
    # vcenterServer: ""
    # insecureSkipVerify: ""
